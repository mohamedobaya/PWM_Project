
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ea6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000ea6  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800082  00800082  00000f5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ce  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b10  00000000  00000000  000031ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fae  00000000  00000000  00003cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00004cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b7  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001485  00000000  00000000  0000594f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_1>
   8:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 bc 04 	jmp	0x978	; 0x978 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 51 07 	jmp	0xea2	; 0xea2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "main.h"

uint8_t duty;

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
    fint32_t time;
    uint32_t freq;
	DIO_SET_PIN_DIR(DIO_PORTB, DIO_PIN3, DIO_OUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(DIO_PORTD, DIO_PIN6, DIO_IN);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	66 e0       	ldi	r22, 0x06	; 6
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	
	TIMER_INIT(CHANNEL_0, PWM_MODE, FREQ_1_KHZ);
  b2:	43 e0       	ldi	r20, 0x03	; 3
  b4:	68 e6       	ldi	r22, 0x68	; 104
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 75 03 	call	0x6ea	; 0x6ea <TIMER_INIT>
	TIMER_START_PWM(CHANNEL_0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <TIMER_START_PWM>
	TIMER_RUN_PWM(CHANNEL_0, 128);
  c4:	60 e8       	ldi	r22, 0x80	; 128
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER_RUN_PWM>
	
	TIMER_INIT(CHANNEL_1, ICU_MODE, ICU_PRESCALER);
  cc:	43 e0       	ldi	r20, 0x03	; 3
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 75 03 	call	0x6ea	; 0x6ea <TIMER_INIT>
	
	TIMER_GET_DUTY_CYCLE_AND_FREQUENCY(&duty, &freq);
  d8:	be 01       	movw	r22, r28
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	86 ea       	ldi	r24, 0xA6	; 166
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TIMER_GET_DUTY_CYCLE_AND_FREQUENCY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x5a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x64>
  f6:	00 00       	nop
	_delay_ms(1000);
	
	time = ((1 / ((fint32_t) freq)) * 1000000);
  f8:	69 81       	ldd	r22, Y+1	; 0x01
  fa:	7a 81       	ldd	r23, Y+2	; 0x02
  fc:	8b 81       	ldd	r24, Y+3	; 0x03
  fe:	9c 81       	ldd	r25, Y+4	; 0x04
 100:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 104:	9b 01       	movw	r18, r22
 106:	ac 01       	movw	r20, r24
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	9f e3       	ldi	r25, 0x3F	; 63
 110:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	34 e2       	ldi	r19, 0x24	; 36
 118:	44 e7       	ldi	r20, 0x74	; 116
 11a:	59 e4       	ldi	r21, 0x49	; 73
 11c:	0e 94 b3 06 	call	0xd66	; 0xd66 <__mulsf3>
 120:	4b 01       	movw	r8, r22
 122:	5c 01       	movw	r10, r24
	
	LCD_INIT();
 124:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_INIT>
	LCD_CLR();
 128:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_CLR>
	// duty = 0;
    while (1) 
    {
		LCD_CLR();
 12c:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_CLR>
		
		
		LCD_WRITE_STR((uint8_t *) "freq= ");
 130:	80 e6       	ldi	r24, 0x60	; 96
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WRITE_STR>
		LCD_WRITE_NUM(freq);
 138:	69 81       	ldd	r22, Y+1	; 0x01
 13a:	7a 81       	ldd	r23, Y+2	; 0x02
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	9c 81       	ldd	r25, Y+4	; 0x04
 140:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WRITE_NUM>
		LCD_WRITE_STR((uint8_t *) " Hz");
 144:	87 e6       	ldi	r24, 0x67	; 103
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WRITE_STR>
		
		LCD_WRITE_STR((uint8_t *) "	,duty= ");
 14c:	8b e6       	ldi	r24, 0x6B	; 107
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WRITE_STR>
		LCD_WRITE_NUM(duty);
 154:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <duty>
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WRITE_NUM>
		LCD_WRITE_CHAR('%');
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_WRITE_CHAR>
		
		LCD_WRITE_STR((uint8_t *) "	,time = ");
 168:	84 e7       	ldi	r24, 0x74	; 116
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WRITE_STR>
		LCD_WRITE_NUM((uint32_t) time);
 170:	c5 01       	movw	r24, r10
 172:	b4 01       	movw	r22, r8
 174:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixunssfsi>
 178:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WRITE_NUM>
		LCD_WRITE_STR((uint8_t *) "us");
 17c:	8e e7       	ldi	r24, 0x7E	; 126
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WRITE_STR>
		
		LCD_NEXT_LINE();
 184:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_NEXT_LINE>
		
		uint8_t i, j;
		uint16_t up = duty / 10;
 188:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <duty>
 18c:	9d ec       	ldi	r25, 0xCD	; 205
 18e:	89 9f       	mul	r24, r25
 190:	c1 2c       	mov	r12, r1
 192:	11 24       	eor	r1, r1
 194:	c6 94       	lsr	r12
 196:	c6 94       	lsr	r12
 198:	c6 94       	lsr	r12
 19a:	d1 2c       	mov	r13, r1
		uint16_t down = 10 - up;
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	7c 01       	movw	r14, r24
 1a2:	ec 18       	sub	r14, r12
 1a4:	fd 08       	sbc	r15, r13
		
		uint8_t loop_count = 40 / (up + down);
		for (i = 0; i < loop_count; i++)
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	29 c0       	rjmp	.+82     	; 0x1fc <main+0x16a>
		{
			for (j = 0; j < down; j++)
			{
				LCD_WRITE_CHAR('_');
 1aa:	8f e5       	ldi	r24, 0x5F	; 95
 1ac:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_WRITE_CHAR>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	84 e3       	ldi	r24, 0x34	; 52
 1b4:	9c e0       	ldi	r25, 0x0C	; 12
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x124>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x12e>
 1c0:	00 00       	nop
		uint16_t down = 10 - up;
		
		uint8_t loop_count = 40 / (up + down);
		for (i = 0; i < loop_count; i++)
		{
			for (j = 0; j < down; j++)
 1c2:	1f 5f       	subi	r17, 0xFF	; 255
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <main+0x136>
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	81 2f       	mov	r24, r17
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	8e 15       	cp	r24, r14
 1ce:	9f 05       	cpc	r25, r15
 1d0:	60 f3       	brcs	.-40     	; 0x1aa <main+0x118>
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <main+0x15e>
				LCD_WRITE_CHAR('_');
				_delay_ms(250);
			}
			for (j = 0; j < up; j++)
			{
				LCD_WRITE_CHAR('-');
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_WRITE_CHAR>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	84 e3       	ldi	r24, 0x34	; 52
 1e0:	9c e0       	ldi	r25, 0x0C	; 12
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x150>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x15a>
 1ec:	00 00       	nop
			for (j = 0; j < down; j++)
			{
				LCD_WRITE_CHAR('_');
				_delay_ms(250);
			}
			for (j = 0; j < up; j++)
 1ee:	1f 5f       	subi	r17, 0xFF	; 255
 1f0:	81 2f       	mov	r24, r17
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	8c 15       	cp	r24, r12
 1f6:	9d 05       	cpc	r25, r13
 1f8:	70 f3       	brcs	.-36     	; 0x1d6 <main+0x144>
		uint8_t i, j;
		uint16_t up = duty / 10;
		uint16_t down = 10 - up;
		
		uint8_t loop_count = 40 / (up + down);
		for (i = 0; i < loop_count; i++)
 1fa:	0f 5f       	subi	r16, 0xFF	; 255
 1fc:	04 30       	cpi	r16, 0x04	; 4
 1fe:	18 f3       	brcs	.-58     	; 0x1c6 <main+0x134>
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	8e e9       	ldi	r24, 0x9E	; 158
 204:	94 e2       	ldi	r25, 0x24	; 36
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x174>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x17e>
 210:	00 00       	nop
 212:	8c cf       	rjmp	.-232    	; 0x12c <main+0x9a>

00000214 <__vector_1>:
					
	}
}

ISR(INT0_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
	
}
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_2>:

ISR(INT1_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
	
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <LCD_WRITE_CMD>:
	LCD_WRITE_CMD(0x06);	//	shift cursor right
	_delay_ms(5);
}

void LCD_WRITE_CMD(uint8_t cmd)
{
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
	// Register select will select control register
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_RS, LCD_LOW);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	// Write on LCD
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	// Set enable pin as low, to ensure logic(0)
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	
	// Send high nibble first
	LCD = (cmd & 0xF0) | (LCD & 0x0F);
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	9c 2f       	mov	r25, r28
 262:	90 7f       	andi	r25, 0xF0	; 240
 264:	8f 70       	andi	r24, 0x0F	; 15
 266:	89 2b       	or	r24, r25
 268:	8b bb       	out	0x1b, r24	; 27
	// Send High to low pulse
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_WRITE_CMD+0x3c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_WRITE_CMD+0x42>
 27e:	00 00       	nop
	_delay_ms(1);
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	// Send low nibble last
	LCD = ((cmd & 0x0F) << 4) | (LCD & 0x0F);
 28a:	20 e1       	ldi	r18, 0x10	; 16
 28c:	c2 9f       	mul	r28, r18
 28e:	c0 01       	movw	r24, r0
 290:	11 24       	eor	r1, r1
 292:	9b b3       	in	r25, 0x1b	; 27
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 2b       	or	r24, r25
 298:	8b bb       	out	0x1b, r24	; 27
	// Send High to low pulse
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
 2a4:	8f e9       	ldi	r24, 0x9F	; 159
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_WRITE_CMD+0x6c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_WRITE_CMD+0x72>
 2ae:	00 00       	nop
	_delay_ms(1);
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
 2ba:	8f e1       	ldi	r24, 0x1F	; 31
 2bc:	9e e4       	ldi	r25, 0x4E	; 78
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_WRITE_CMD+0x82>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_WRITE_CMD+0x88>
 2c4:	00 00       	nop
	_delay_ms(5);
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_INIT>:
#include "LCD.h"

void LCD_INIT(void)
{
	// Pins Direction
	DIO_SET_PIN_DIR(LCD_CNTRL_PORT, LCD_RS, LCD_OUT);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(LCD_CNTRL_PORT, LCD_RW, LCD_OUT);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(LCD_CNTRL_PORT, LCD_EN, LCD_OUT);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	
	DIO_SET_PIN_DIR(LCD_DATA_PORT, LCD_D4, LCD_OUT);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(LCD_DATA_PORT, LCD_D5, LCD_OUT);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(LCD_DATA_PORT, LCD_D6, LCD_OUT);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	66 e0       	ldi	r22, 0x06	; 6
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR(LCD_DATA_PORT, LCD_D7, LCD_OUT);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	67 e0       	ldi	r22, 0x07	; 7
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 93 02 	call	0x526	; 0x526 <DIO_SET_PIN_DIR>
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	9f e1       	ldi	r25, 0x1F	; 31
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_INIT+0x4a>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_INIT+0x50>
 31a:	00 00       	nop
	
	_delay_ms(2);
	LCD_WRITE_CMD(0x33);	// for initialization
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x32);	// for initialization
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x28);	// for initialization
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x01);	// Clear LCD
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
	LCD_WRITE_CMD(0x0C);	// display On, cursor off
 334:	8c e0       	ldi	r24, 0x0C	; 12
 336:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
	//LCD_WRITE_CMD(0x0E);	// display On, cursor on
	LCD_WRITE_CMD(0x06);	//	shift cursor right
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
 340:	8f e1       	ldi	r24, 0x1F	; 31
 342:	9e e4       	ldi	r25, 0x4E	; 78
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_INIT+0x7a>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_INIT+0x80>
 34a:	00 00       	nop
 34c:	08 95       	ret

0000034e <LCD_WRITE_CHAR>:
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
	_delay_ms(5);
}

void LCD_WRITE_CHAR(uint8_t ch)
{
 34e:	cf 93       	push	r28
 350:	c8 2f       	mov	r28, r24
	// Register select will select control register
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	// Write on LCD
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	// Set enable pin as low, to ensure logic(0)
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	
	// Send high nibble first
	LCD = (ch & 0xF0) | (LCD & 0x0F);
 370:	8b b3       	in	r24, 0x1b	; 27
 372:	9c 2f       	mov	r25, r28
 374:	90 7f       	andi	r25, 0xF0	; 240
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	89 2b       	or	r24, r25
 37a:	8b bb       	out	0x1b, r24	; 27
	// Send High to low pulse
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
 386:	8f e9       	ldi	r24, 0x9F	; 159
 388:	9f e0       	ldi	r25, 0x0F	; 15
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_WRITE_CHAR+0x3c>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_WRITE_CHAR+0x42>
 390:	00 00       	nop
	_delay_ms(1);
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
	// Send low nibble last
	LCD = ((ch & 0x0F) << 4) | (LCD & 0x0F);
 39c:	20 e1       	ldi	r18, 0x10	; 16
 39e:	c2 9f       	mul	r28, r18
 3a0:	c0 01       	movw	r24, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	9b b3       	in	r25, 0x1b	; 27
 3a6:	9f 70       	andi	r25, 0x0F	; 15
 3a8:	89 2b       	or	r24, r25
 3aa:	8b bb       	out	0x1b, r24	; 27
	// Send High to low pulse
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
 3b6:	8f e9       	ldi	r24, 0x9F	; 159
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_WRITE_CHAR+0x6c>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_WRITE_CHAR+0x72>
 3c0:	00 00       	nop
	_delay_ms(1);
	DIO_SET_PIN_VAL(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 04 03 	call	0x608	; 0x608 <DIO_SET_PIN_VAL>
 3cc:	8f e1       	ldi	r24, 0x1F	; 31
 3ce:	9e e4       	ldi	r25, 0x4E	; 78
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_WRITE_CHAR+0x82>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_WRITE_CHAR+0x88>
 3d6:	00 00       	nop
	_delay_ms(5);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_WRITE_STR>:

void LCD_WRITE_STR(uint8_t * s)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	while (*s != '\0')
 3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <LCD_WRITE_STR+0x1a>
	{
		LCD_WRITE_CHAR(*s);
 3e4:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_WRITE_CHAR>
 3e8:	8f e3       	ldi	r24, 0x3F	; 63
 3ea:	9c e9       	ldi	r25, 0x9C	; 156
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_WRITE_STR+0x10>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_WRITE_STR+0x16>
 3f2:	00 00       	nop
		_delay_ms(10);
		s++;
 3f4:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(5);
}

void LCD_WRITE_STR(uint8_t * s)
{
	while (*s != '\0')
 3f6:	88 81       	ld	r24, Y
 3f8:	81 11       	cpse	r24, r1
 3fa:	f4 cf       	rjmp	.-24     	; 0x3e4 <LCD_WRITE_STR+0x8>
	{
		LCD_WRITE_CHAR(*s);
		_delay_ms(10);
		s++;
	}
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <LCD_WRITE_NUM>:

void LCD_WRITE_NUM(uint32_t num)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	2a 97       	sbiw	r28, 0x0a	; 10
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
	if (num == 0)
 416:	61 15       	cp	r22, r1
 418:	71 05       	cpc	r23, r1
 41a:	81 05       	cpc	r24, r1
 41c:	91 05       	cpc	r25, r1
 41e:	21 f4       	brne	.+8      	; 0x428 <LCD_WRITE_NUM+0x26>
	{
		LCD_WRITE_CHAR('0');
 420:	80 e3       	ldi	r24, 0x30	; 48
 422:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_WRITE_CHAR>
 426:	0a c0       	rjmp	.+20     	; 0x43c <LCD_WRITE_NUM+0x3a>
		return;
	}
	uint8_t num_str[10];
	IntegerToString(num_str, num);
 428:	ab 01       	movw	r20, r22
 42a:	bc 01       	movw	r22, r24
 42c:	ce 01       	movw	r24, r28
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	0e 94 2f 02 	call	0x45e	; 0x45e <IntegerToString>
	LCD_WRITE_STR(num_str);
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WRITE_STR>
}
 43c:	2a 96       	adiw	r28, 0x0a	; 10
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <LCD_CLR>:

void LCD_CLR(void)
{
	LCD_WRITE_CMD(0x01);
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
 454:	08 95       	ret

00000456 <LCD_NEXT_LINE>:
}

void LCD_NEXT_LINE(void)
{
	LCD_WRITE_CMD(0xC0);	// move cursor to the 2nd line
 456:	80 ec       	ldi	r24, 0xC0	; 192
 458:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WRITE_CMD>
 45c:	08 95       	ret

0000045e <IntegerToString>:
 */ 

#include "Helper_Functions.h"

void IntegerToString(uint8_t * str, uint32_t num)
{
 45e:	6f 92       	push	r6
 460:	7f 92       	push	r7
 462:	8f 92       	push	r8
 464:	9f 92       	push	r9
 466:	af 92       	push	r10
 468:	bf 92       	push	r11
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
 47c:	14 2f       	mov	r17, r20
 47e:	05 2f       	mov	r16, r21
 480:	76 2e       	mov	r7, r22
 482:	67 2e       	mov	r6, r23
	uint32_t i, rem, len = 0, n;
	
	n = num;
 484:	24 2f       	mov	r18, r20
 486:	35 2f       	mov	r19, r21
 488:	46 2f       	mov	r20, r22
 48a:	57 2f       	mov	r21, r23

#include "Helper_Functions.h"

void IntegerToString(uint8_t * str, uint32_t num)
{
	uint32_t i, rem, len = 0, n;
 48c:	c1 2c       	mov	r12, r1
 48e:	d1 2c       	mov	r13, r1
 490:	76 01       	movw	r14, r12
	
	n = num;
	while (n != 0)
 492:	0d c0       	rjmp	.+26     	; 0x4ae <IntegerToString+0x50>
	{
		len++;
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	c8 1a       	sub	r12, r24
 498:	d8 0a       	sbc	r13, r24
 49a:	e8 0a       	sbc	r14, r24
 49c:	f8 0a       	sbc	r15, r24
		n /= 10;
 49e:	ca 01       	movw	r24, r20
 4a0:	b9 01       	movw	r22, r18
 4a2:	2a e0       	ldi	r18, 0x0A	; 10
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	0e 94 20 07 	call	0xe40	; 0xe40 <__udivmodsi4>
void IntegerToString(uint8_t * str, uint32_t num)
{
	uint32_t i, rem, len = 0, n;
	
	n = num;
	while (n != 0)
 4ae:	21 15       	cp	r18, r1
 4b0:	31 05       	cpc	r19, r1
 4b2:	41 05       	cpc	r20, r1
 4b4:	51 05       	cpc	r21, r1
 4b6:	71 f7       	brne	.-36     	; 0x494 <IntegerToString+0x36>
 4b8:	81 2c       	mov	r8, r1
 4ba:	91 2c       	mov	r9, r1
 4bc:	54 01       	movw	r10, r8
 4be:	1b c0       	rjmp	.+54     	; 0x4f6 <IntegerToString+0x98>
		n /= 10;
	}
	for (i = 0; i < len; i++)
	{
		rem = num % 10;
		num = num / 10;
 4c0:	61 2f       	mov	r22, r17
 4c2:	70 2f       	mov	r23, r16
 4c4:	87 2d       	mov	r24, r7
 4c6:	96 2d       	mov	r25, r6
 4c8:	2a e0       	ldi	r18, 0x0A	; 10
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	0e 94 20 07 	call	0xe40	; 0xe40 <__udivmodsi4>
 4d4:	12 2f       	mov	r17, r18
 4d6:	03 2f       	mov	r16, r19
 4d8:	74 2e       	mov	r7, r20
 4da:	65 2e       	mov	r6, r21
		str[len - (i + 1)] = rem + '0';
 4dc:	f6 01       	movw	r30, r12
 4de:	e8 19       	sub	r30, r8
 4e0:	f9 09       	sbc	r31, r9
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	ec 0f       	add	r30, r28
 4e6:	fd 1f       	adc	r31, r29
 4e8:	60 5d       	subi	r22, 0xD0	; 208
 4ea:	60 83       	st	Z, r22
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	88 1a       	sub	r8, r24
 4f0:	98 0a       	sbc	r9, r24
 4f2:	a8 0a       	sbc	r10, r24
 4f4:	b8 0a       	sbc	r11, r24
 4f6:	8c 14       	cp	r8, r12
 4f8:	9d 04       	cpc	r9, r13
 4fa:	ae 04       	cpc	r10, r14
 4fc:	bf 04       	cpc	r11, r15
 4fe:	00 f3       	brcs	.-64     	; 0x4c0 <IntegerToString+0x62>
	{
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
 500:	fe 01       	movw	r30, r28
 502:	ec 0d       	add	r30, r12
 504:	fd 1d       	adc	r31, r13
 506:	10 82       	st	Z, r1
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	ff 90       	pop	r15
 512:	ef 90       	pop	r14
 514:	df 90       	pop	r13
 516:	cf 90       	pop	r12
 518:	bf 90       	pop	r11
 51a:	af 90       	pop	r10
 51c:	9f 90       	pop	r9
 51e:	8f 90       	pop	r8
 520:	7f 90       	pop	r7
 522:	6f 90       	pop	r6
 524:	08 95       	ret

00000526 <DIO_SET_PIN_DIR>:

#include "DIO.h"

void DIO_SET_PIN_DIR(DIO_PORT port, DIO_PIN pin, DIO_DIR dir)
{
	switch(dir)
 526:	44 23       	and	r20, r20
 528:	19 f0       	breq	.+6      	; 0x530 <DIO_SET_PIN_DIR+0xa>
 52a:	41 30       	cpi	r20, 0x01	; 1
 52c:	c9 f1       	breq	.+114    	; 0x5a0 <DIO_SET_PIN_DIR+0x7a>
 52e:	08 95       	ret
	{
		case DIO_IN:
		switch(port)
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	91 f0       	breq	.+36     	; 0x558 <DIO_SET_PIN_DIR+0x32>
 534:	28 f0       	brcs	.+10     	; 0x540 <DIO_SET_PIN_DIR+0x1a>
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	d9 f0       	breq	.+54     	; 0x570 <DIO_SET_PIN_DIR+0x4a>
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	29 f1       	breq	.+74     	; 0x588 <DIO_SET_PIN_DIR+0x62>
 53e:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 540:	2a b3       	in	r18, 0x1a	; 26
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_SET_PIN_DIR+0x26>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_SET_PIN_DIR+0x22>
 550:	80 95       	com	r24
 552:	82 23       	and	r24, r18
 554:	8a bb       	out	0x1a, r24	; 26
			break;
 556:	08 95       	ret
			
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 558:	27 b3       	in	r18, 0x17	; 23
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_SET_PIN_DIR+0x3e>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_SET_PIN_DIR+0x3a>
 568:	80 95       	com	r24
 56a:	82 23       	and	r24, r18
 56c:	87 bb       	out	0x17, r24	; 23
			break;
 56e:	08 95       	ret
			
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 570:	24 b3       	in	r18, 0x14	; 20
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_SET_PIN_DIR+0x56>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_SET_PIN_DIR+0x52>
 580:	80 95       	com	r24
 582:	82 23       	and	r24, r18
 584:	84 bb       	out	0x14, r24	; 20
			break;
 586:	08 95       	ret
			
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 588:	21 b3       	in	r18, 0x11	; 17
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_SET_PIN_DIR+0x6e>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_SET_PIN_DIR+0x6a>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	81 bb       	out	0x11, r24	; 17
			break;
 59e:	08 95       	ret
		}
		break;
		
		case DIO_OUT:
		switch(port)
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	89 f0       	breq	.+34     	; 0x5c6 <DIO_SET_PIN_DIR+0xa0>
 5a4:	28 f0       	brcs	.+10     	; 0x5b0 <DIO_SET_PIN_DIR+0x8a>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	c9 f0       	breq	.+50     	; 0x5dc <DIO_SET_PIN_DIR+0xb6>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	11 f1       	breq	.+68     	; 0x5f2 <DIO_SET_PIN_DIR+0xcc>
 5ae:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 5b0:	2a b3       	in	r18, 0x1a	; 26
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_SET_PIN_DIR+0x96>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_SET_PIN_DIR+0x92>
 5c0:	82 2b       	or	r24, r18
 5c2:	8a bb       	out	0x1a, r24	; 26
			break;
 5c4:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 5c6:	27 b3       	in	r18, 0x17	; 23
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_SET_PIN_DIR+0xac>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_SET_PIN_DIR+0xa8>
 5d6:	82 2b       	or	r24, r18
 5d8:	87 bb       	out	0x17, r24	; 23
			break;
 5da:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 5dc:	24 b3       	in	r18, 0x14	; 20
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_SET_PIN_DIR+0xc2>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_SET_PIN_DIR+0xbe>
 5ec:	82 2b       	or	r24, r18
 5ee:	84 bb       	out	0x14, r24	; 20
			break;
 5f0:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 5f2:	21 b3       	in	r18, 0x11	; 17
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_SET_PIN_DIR+0xd8>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_SET_PIN_DIR+0xd4>
 602:	82 2b       	or	r24, r18
 604:	81 bb       	out	0x11, r24	; 17
 606:	08 95       	ret

00000608 <DIO_SET_PIN_VAL>:
	}
}

void DIO_SET_PIN_VAL(DIO_PORT port, DIO_PIN pin, DIO_VAL val)
{
	switch(val)
 608:	44 23       	and	r20, r20
 60a:	19 f0       	breq	.+6      	; 0x612 <DIO_SET_PIN_VAL+0xa>
 60c:	41 30       	cpi	r20, 0x01	; 1
 60e:	c9 f1       	breq	.+114    	; 0x682 <DIO_SET_PIN_VAL+0x7a>
 610:	08 95       	ret
	{
		case DIO_LOW:
		switch(port)
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	91 f0       	breq	.+36     	; 0x63a <DIO_SET_PIN_VAL+0x32>
 616:	28 f0       	brcs	.+10     	; 0x622 <DIO_SET_PIN_VAL+0x1a>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	d9 f0       	breq	.+54     	; 0x652 <DIO_SET_PIN_VAL+0x4a>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	29 f1       	breq	.+74     	; 0x66a <DIO_SET_PIN_VAL+0x62>
 620:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 622:	2b b3       	in	r18, 0x1b	; 27
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_SET_PIN_VAL+0x26>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_SET_PIN_VAL+0x22>
 632:	80 95       	com	r24
 634:	82 23       	and	r24, r18
 636:	8b bb       	out	0x1b, r24	; 27
			break;
 638:	08 95       	ret
			
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 63a:	28 b3       	in	r18, 0x18	; 24
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_SET_PIN_VAL+0x3e>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_SET_PIN_VAL+0x3a>
 64a:	80 95       	com	r24
 64c:	82 23       	and	r24, r18
 64e:	88 bb       	out	0x18, r24	; 24
			break;
 650:	08 95       	ret
			
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 652:	25 b3       	in	r18, 0x15	; 21
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_SET_PIN_VAL+0x56>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_SET_PIN_VAL+0x52>
 662:	80 95       	com	r24
 664:	82 23       	and	r24, r18
 666:	85 bb       	out	0x15, r24	; 21
			break;
 668:	08 95       	ret
			
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 66a:	22 b3       	in	r18, 0x12	; 18
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SET_PIN_VAL+0x6e>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SET_PIN_VAL+0x6a>
 67a:	80 95       	com	r24
 67c:	82 23       	and	r24, r18
 67e:	82 bb       	out	0x12, r24	; 18
			break;
 680:	08 95       	ret
		}
		break;
		
		case DIO_HIGH:
		switch(port)
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	89 f0       	breq	.+34     	; 0x6a8 <DIO_SET_PIN_VAL+0xa0>
 686:	28 f0       	brcs	.+10     	; 0x692 <DIO_SET_PIN_VAL+0x8a>
 688:	82 30       	cpi	r24, 0x02	; 2
 68a:	c9 f0       	breq	.+50     	; 0x6be <DIO_SET_PIN_VAL+0xb6>
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	11 f1       	breq	.+68     	; 0x6d4 <DIO_SET_PIN_VAL+0xcc>
 690:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 692:	2b b3       	in	r18, 0x1b	; 27
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_SET_PIN_VAL+0x96>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	6a 95       	dec	r22
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_SET_PIN_VAL+0x92>
 6a2:	82 2b       	or	r24, r18
 6a4:	8b bb       	out	0x1b, r24	; 27
			break;
 6a6:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 6a8:	28 b3       	in	r18, 0x18	; 24
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SET_PIN_VAL+0xac>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_SET_PIN_VAL+0xa8>
 6b8:	82 2b       	or	r24, r18
 6ba:	88 bb       	out	0x18, r24	; 24
			break;
 6bc:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 6be:	25 b3       	in	r18, 0x15	; 21
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_SET_PIN_VAL+0xc2>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_SET_PIN_VAL+0xbe>
 6ce:	82 2b       	or	r24, r18
 6d0:	85 bb       	out	0x15, r24	; 21
			break;
 6d2:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 6d4:	22 b3       	in	r18, 0x12	; 18
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_SET_PIN_VAL+0xd8>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_SET_PIN_VAL+0xd4>
 6e4:	82 2b       	or	r24, r18
 6e6:	82 bb       	out	0x12, r24	; 18
 6e8:	08 95       	ret

000006ea <TIMER_INIT>:

		break;
		//--------------------------------------//
		case CHANNEL_2:
		
		TIMER_STOP(CHANNEL_2);
 6ea:	68 36       	cpi	r22, 0x68	; 104
 6ec:	71 05       	cpc	r23, r1
 6ee:	29 f4       	brne	.+10     	; 0x6fa <TIMER_INIT+0x10>
 6f0:	43 33       	cpi	r20, 0x33	; 51
 6f2:	18 f0       	brcs	.+6      	; 0x6fa <TIMER_INIT+0x10>
 6f4:	42 53       	subi	r20, 0x32	; 50
 6f6:	60 e6       	ldi	r22, 0x60	; 96
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	41 f0       	breq	.+16     	; 0x70e <TIMER_INIT+0x24>
 6fe:	18 f0       	brcs	.+6      	; 0x706 <TIMER_INIT+0x1c>
 700:	82 30       	cpi	r24, 0x02	; 2
 702:	59 f0       	breq	.+22     	; 0x71a <TIMER_INIT+0x30>
 704:	08 95       	ret
 706:	63 bf       	out	0x33, r22	; 51
 708:	40 93 a5 00 	sts	0x00A5, r20	; 0x8000a5 <timer0_prescaler>
 70c:	08 95       	ret
 70e:	77 27       	eor	r23, r23
 710:	7f bd       	out	0x2f, r23	; 47
 712:	6e bd       	out	0x2e, r22	; 46
 714:	40 93 a4 00 	sts	0x00A4, r20	; 0x8000a4 <timer1_prescaler>
 718:	08 95       	ret
 71a:	65 bd       	out	0x25, r22	; 37
 71c:	40 93 a3 00 	sts	0x00A3, r20	; 0x8000a3 <timer2_prescaler>
 720:	08 95       	ret

00000722 <TIMER_START>:
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	59 f0       	breq	.+22     	; 0x73c <TIMER_START+0x1a>
 726:	18 f0       	brcs	.+6      	; 0x72e <TIMER_START+0xc>
 728:	82 30       	cpi	r24, 0x02	; 2
 72a:	91 f0       	breq	.+36     	; 0x750 <TIMER_START+0x2e>
 72c:	08 95       	ret
 72e:	12 be       	out	0x32, r1	; 50
 730:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <timer0_prescaler>
 734:	83 b7       	in	r24, 0x33	; 51
 736:	89 2b       	or	r24, r25
 738:	83 bf       	out	0x33, r24	; 51
 73a:	08 95       	ret
 73c:	1d bc       	out	0x2d, r1	; 45
 73e:	1c bc       	out	0x2c, r1	; 44
 740:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <timer1_prescaler>
 744:	8e b5       	in	r24, 0x2e	; 46
 746:	9f b5       	in	r25, 0x2f	; 47
 748:	82 2b       	or	r24, r18
 74a:	9f bd       	out	0x2f, r25	; 47
 74c:	8e bd       	out	0x2e, r24	; 46
 74e:	08 95       	ret
 750:	14 bc       	out	0x24, r1	; 36
 752:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <timer2_prescaler>
 756:	85 b5       	in	r24, 0x25	; 37
 758:	89 2b       	or	r24, r25
 75a:	85 bd       	out	0x25, r24	; 37
 75c:	08 95       	ret

0000075e <TIMER_STOP>:
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	41 f0       	breq	.+16     	; 0x772 <TIMER_STOP+0x14>
 762:	18 f0       	brcs	.+6      	; 0x76a <TIMER_STOP+0xc>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	59 f0       	breq	.+22     	; 0x77e <TIMER_STOP+0x20>
 768:	08 95       	ret
 76a:	82 b7       	in	r24, 0x32	; 50
 76c:	88 7f       	andi	r24, 0xF8	; 248
 76e:	82 bf       	out	0x32, r24	; 50
 770:	08 95       	ret
 772:	8c b5       	in	r24, 0x2c	; 44
 774:	9d b5       	in	r25, 0x2d	; 45
 776:	88 7f       	andi	r24, 0xF8	; 248
 778:	9d bd       	out	0x2d, r25	; 45
 77a:	8c bd       	out	0x2c, r24	; 44
 77c:	08 95       	ret
 77e:	84 b5       	in	r24, 0x24	; 36
 780:	88 7f       	andi	r24, 0xF8	; 248
 782:	84 bd       	out	0x24, r24	; 36
 784:	08 95       	ret

00000786 <TIMER_RUN_PWM>:
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	31 f0       	breq	.+12     	; 0x796 <TIMER_RUN_PWM+0x10>
 78a:	18 f0       	brcs	.+6      	; 0x792 <TIMER_RUN_PWM+0xc>
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	39 f0       	breq	.+14     	; 0x79e <TIMER_RUN_PWM+0x18>
 790:	08 95       	ret
 792:	6c bf       	out	0x3c, r22	; 60
 794:	08 95       	ret
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	7b bd       	out	0x2b, r23	; 43
 79a:	6a bd       	out	0x2a, r22	; 42
 79c:	08 95       	ret
 79e:	63 bd       	out	0x23, r22	; 35
 7a0:	08 95       	ret

000007a2 <TIMER_START_PWM>:
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	41 f0       	breq	.+16     	; 0x7b6 <TIMER_START_PWM+0x14>
 7a6:	18 f0       	brcs	.+6      	; 0x7ae <TIMER_START_PWM+0xc>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	49 f0       	breq	.+18     	; 0x7be <TIMER_START_PWM+0x1c>
 7ac:	08 95       	ret
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	0e 94 91 03 	call	0x722	; 0x722 <TIMER_START>
 7b4:	08 95       	ret
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 91 03 	call	0x722	; 0x722 <TIMER_START>
 7bc:	08 95       	ret
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	0e 94 91 03 	call	0x722	; 0x722 <TIMER_START>
 7c4:	08 95       	ret

000007c6 <TIMER_GET_DUTY_CYCLE_AND_FREQUENCY>:
		break;
	}
}

void TIMER_GET_DUTY_CYCLE_AND_FREQUENCY(uint8_t * duty_cycle, uint32_t * frequency)
{
 7c6:	8f 92       	push	r8
 7c8:	9f 92       	push	r9
 7ca:	af 92       	push	r10
 7cc:	bf 92       	push	r11
 7ce:	ef 92       	push	r14
 7d0:	ff 92       	push	r15
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	00 d0       	rcall	.+0      	; 0x7dc <TIMER_GET_DUTY_CYCLE_AND_FREQUENCY+0x16>
 7dc:	00 d0       	rcall	.+0      	; 0x7de <TIMER_GET_DUTY_CYCLE_AND_FREQUENCY+0x18>
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <TIMER_GET_DUTY_CYCLE_AND_FREQUENCY+0x1a>
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	7c 01       	movw	r14, r24
 7e6:	8b 01       	movw	r16, r22
	uint8_t i;
	
	uint16_t capture_values[3] = {0};
 7e8:	fe 01       	movw	r30, r28
 7ea:	31 96       	adiw	r30, 0x01	; 1
 7ec:	86 e0       	ldi	r24, 0x06	; 6
 7ee:	df 01       	movw	r26, r30
 7f0:	1d 92       	st	X+, r1
 7f2:	8a 95       	dec	r24
 7f4:	e9 f7       	brne	.-6      	; 0x7f0 <TIMER_GET_DUTY_CYCLE_AND_FREQUENCY+0x2a>
	
	uint16_t ton = 0;
	uint16_t time = 0;
	
	SET_BIT(TCCR1, ICES1);
 7f6:	8e b5       	in	r24, 0x2e	; 46
 7f8:	9f b5       	in	r25, 0x2f	; 47
 7fa:	80 64       	ori	r24, 0x40	; 64
 7fc:	9f bd       	out	0x2f, r25	; 47
 7fe:	8e bd       	out	0x2e, r24	; 46
	TIMER_START(CHANNEL_1);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 91 03 	call	0x722	; 0x722 <TIMER_START>
	
	for (i = 0; i < 3; i++)
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	1b c0       	rjmp	.+54     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		while (!GET_BIT(TIFR, ICF1));
 80a:	08 b6       	in	r0, 0x38	; 56
 80c:	05 fe       	sbrs	r0, 5
 80e:	fd cf       	rjmp	.-6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		
		capture_values[i] = ICR1;
 810:	e8 2f       	mov	r30, r24
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	26 b5       	in	r18, 0x26	; 38
 816:	37 b5       	in	r19, 0x27	; 39
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	41 e0       	ldi	r20, 0x01	; 1
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	4c 0f       	add	r20, r28
 822:	5d 1f       	adc	r21, r29
 824:	e4 0f       	add	r30, r20
 826:	f5 1f       	adc	r31, r21
 828:	31 83       	std	Z+1, r19	; 0x01
 82a:	20 83       	st	Z, r18
		
		SET_BIT(TIFR, ICF1);
 82c:	98 b7       	in	r25, 0x38	; 56
 82e:	90 62       	ori	r25, 0x20	; 32
 830:	98 bf       	out	0x38, r25	; 56
		
		TGL_BIT(TCCR1, ICES1);
 832:	2e b5       	in	r18, 0x2e	; 46
 834:	3f b5       	in	r19, 0x2f	; 47
 836:	50 e4       	ldi	r21, 0x40	; 64
 838:	25 27       	eor	r18, r21
 83a:	3f bd       	out	0x2f, r19	; 47
 83c:	2e bd       	out	0x2e, r18	; 46
	uint16_t time = 0;
	
	SET_BIT(TCCR1, ICES1);
	TIMER_START(CHANNEL_1);
	
	for (i = 0; i < 3; i++)
 83e:	8f 5f       	subi	r24, 0xFF	; 255
 840:	83 30       	cpi	r24, 0x03	; 3
 842:	18 f3       	brcs	.-58     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		SET_BIT(TIFR, ICF1);
		
		TGL_BIT(TCCR1, ICES1);
	}
	
	TIMER_STOP(CHANNEL_1);
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER_STOP>
	
	ton  = capture_values[1] - capture_values[0];
 84a:	2b 81       	ldd	r18, Y+3	; 0x03
 84c:	3c 81       	ldd	r19, Y+4	; 0x04
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	9a 81       	ldd	r25, Y+2	; 0x02
 852:	28 1b       	sub	r18, r24
 854:	39 0b       	sbc	r19, r25
	
	time = capture_values[2] - capture_values[0];
 856:	8d 80       	ldd	r8, Y+5	; 0x05
 858:	9e 80       	ldd	r9, Y+6	; 0x06
 85a:	88 1a       	sub	r8, r24
 85c:	99 0a       	sbc	r9, r25
	
	*duty_cycle = (uint8_t) (((uint32_t) ton * 100) / time);
 85e:	a4 e6       	ldi	r26, 0x64	; 100
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	0e 94 42 07 	call	0xe84	; 0xe84 <__umulhisi3>
 866:	a1 2c       	mov	r10, r1
 868:	b1 2c       	mov	r11, r1
 86a:	a5 01       	movw	r20, r10
 86c:	94 01       	movw	r18, r8
 86e:	0e 94 20 07 	call	0xe40	; 0xe40 <__udivmodsi4>
 872:	d7 01       	movw	r26, r14
 874:	2c 93       	st	X, r18
	*frequency	=  ICU_FREQ_4_US_DIVIDER / (uint32_t) time;
 876:	60 e9       	ldi	r22, 0x90	; 144
 878:	70 ed       	ldi	r23, 0xD0	; 208
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	a5 01       	movw	r20, r10
 880:	94 01       	movw	r18, r8
 882:	0e 94 20 07 	call	0xe40	; 0xe40 <__udivmodsi4>
 886:	f8 01       	movw	r30, r16
 888:	20 83       	st	Z, r18
 88a:	31 83       	std	Z+1, r19	; 0x01
 88c:	42 83       	std	Z+2, r20	; 0x02
 88e:	53 83       	std	Z+3, r21	; 0x03
}
 890:	26 96       	adiw	r28, 0x06	; 6
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	ff 90       	pop	r15
 8a6:	ef 90       	pop	r14
 8a8:	bf 90       	pop	r11
 8aa:	af 90       	pop	r10
 8ac:	9f 90       	pop	r9
 8ae:	8f 90       	pop	r8
 8b0:	08 95       	ret

000008b2 <__vector_10>:
//--------------------------------------------------------------------------------------------//
// Timers ISRs

// Timer 0 ISR
ISR(TIMER0_COMP_vect)
{
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	2f 93       	push	r18
 8be:	3f 93       	push	r19
 8c0:	4f 93       	push	r20
 8c2:	5f 93       	push	r21
 8c4:	6f 93       	push	r22
 8c6:	7f 93       	push	r23
 8c8:	8f 93       	push	r24
 8ca:	9f 93       	push	r25
 8cc:	af 93       	push	r26
 8ce:	bf 93       	push	r27
 8d0:	ef 93       	push	r30
 8d2:	ff 93       	push	r31
	static uint32_t delay_time_temp = 0;
	delay_time_temp++;
 8d4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <delay_time_temp.1995>
 8d8:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <delay_time_temp.1995+0x1>
 8dc:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <delay_time_temp.1995+0x2>
 8e0:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <delay_time_temp.1995+0x3>
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	a1 1d       	adc	r26, r1
 8e8:	b1 1d       	adc	r27, r1
 8ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <delay_time_temp.1995>
 8ee:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <delay_time_temp.1995+0x1>
 8f2:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <delay_time_temp.1995+0x2>
 8f6:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <delay_time_temp.1995+0x3>
	
	if (delay_time_temp == timer0_delayTimeMs)
 8fa:	40 91 9f 00 	lds	r20, 0x009F	; 0x80009f <timer0_delayTimeMs>
 8fe:	50 91 a0 00 	lds	r21, 0x00A0	; 0x8000a0 <timer0_delayTimeMs+0x1>
 902:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <timer0_delayTimeMs+0x2>
 906:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <timer0_delayTimeMs+0x3>
 90a:	84 17       	cp	r24, r20
 90c:	95 07       	cpc	r25, r21
 90e:	a6 07       	cpc	r26, r22
 910:	b7 07       	cpc	r27, r23
 912:	09 f5       	brne	.+66     	; 0x956 <__vector_10+0xa4>
	{
		if (ptr_timer0ISR != NULL)
 914:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <ptr_timer0ISR>
 918:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <ptr_timer0ISR+0x1>
 91c:	30 97       	sbiw	r30, 0x00	; 0
 91e:	d9 f0       	breq	.+54     	; 0x956 <__vector_10+0xa4>
		{
			if (timer0_delayTimeMs == 0)
 920:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <timer0_delayTimeMs>
 924:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <timer0_delayTimeMs+0x1>
 928:	a0 91 a1 00 	lds	r26, 0x00A1	; 0x8000a1 <timer0_delayTimeMs+0x2>
 92c:	b0 91 a2 00 	lds	r27, 0x00A2	; 0x8000a2 <timer0_delayTimeMs+0x3>
 930:	89 2b       	or	r24, r25
 932:	8a 2b       	or	r24, r26
 934:	8b 2b       	or	r24, r27
 936:	79 f4       	brne	.+30     	; 0x956 <__vector_10+0xa4>
			{
				ptr_timer0ISR();
 938:	09 95       	icall
				delay_time_temp = 0;
 93a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <delay_time_temp.1995>
 93e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <delay_time_temp.1995+0x1>
 942:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <delay_time_temp.1995+0x2>
 946:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <delay_time_temp.1995+0x3>
				
				if (timer0_operation_mode == (uint8_t) SINGLE_OPERATION)
 94a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <timer0_operation_mode>
 94e:	81 11       	cpse	r24, r1
 950:	02 c0       	rjmp	.+4      	; 0x956 <__vector_10+0xa4>
					TIMER_STOP(CHANNEL_0);
 952:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER_STOP>
			}
		}
	}
}
 956:	ff 91       	pop	r31
 958:	ef 91       	pop	r30
 95a:	bf 91       	pop	r27
 95c:	af 91       	pop	r26
 95e:	9f 91       	pop	r25
 960:	8f 91       	pop	r24
 962:	7f 91       	pop	r23
 964:	6f 91       	pop	r22
 966:	5f 91       	pop	r21
 968:	4f 91       	pop	r20
 96a:	3f 91       	pop	r19
 96c:	2f 91       	pop	r18
 96e:	0f 90       	pop	r0
 970:	0f be       	out	0x3f, r0	; 63
 972:	0f 90       	pop	r0
 974:	1f 90       	pop	r1
 976:	18 95       	reti

00000978 <__vector_7>:

// Timer 1 ISR
ISR(TIMER1_COMPA_vect)
{
 978:	1f 92       	push	r1
 97a:	0f 92       	push	r0
 97c:	0f b6       	in	r0, 0x3f	; 63
 97e:	0f 92       	push	r0
 980:	11 24       	eor	r1, r1
 982:	2f 93       	push	r18
 984:	3f 93       	push	r19
 986:	4f 93       	push	r20
 988:	5f 93       	push	r21
 98a:	6f 93       	push	r22
 98c:	7f 93       	push	r23
 98e:	8f 93       	push	r24
 990:	9f 93       	push	r25
 992:	af 93       	push	r26
 994:	bf 93       	push	r27
 996:	ef 93       	push	r30
 998:	ff 93       	push	r31
	static uint32_t delay_time_temp = 0;
	delay_time_temp++;
 99a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <delay_time_temp.2001>
 99e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <delay_time_temp.2001+0x1>
 9a2:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <delay_time_temp.2001+0x2>
 9a6:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <delay_time_temp.2001+0x3>
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	a1 1d       	adc	r26, r1
 9ae:	b1 1d       	adc	r27, r1
 9b0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <delay_time_temp.2001>
 9b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <delay_time_temp.2001+0x1>
 9b8:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <delay_time_temp.2001+0x2>
 9bc:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <delay_time_temp.2001+0x3>
	
	if (delay_time_temp == timer1_delayTimeMs)
 9c0:	40 91 9b 00 	lds	r20, 0x009B	; 0x80009b <timer1_delayTimeMs>
 9c4:	50 91 9c 00 	lds	r21, 0x009C	; 0x80009c <timer1_delayTimeMs+0x1>
 9c8:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <timer1_delayTimeMs+0x2>
 9cc:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <timer1_delayTimeMs+0x3>
 9d0:	84 17       	cp	r24, r20
 9d2:	95 07       	cpc	r25, r21
 9d4:	a6 07       	cpc	r26, r22
 9d6:	b7 07       	cpc	r27, r23
 9d8:	11 f5       	brne	.+68     	; 0xa1e <__vector_7+0xa6>
	{
		if (ptr_timer1ISR != NULL)
 9da:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <ptr_timer1ISR>
 9de:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <ptr_timer1ISR+0x1>
 9e2:	30 97       	sbiw	r30, 0x00	; 0
 9e4:	e1 f0       	breq	.+56     	; 0xa1e <__vector_7+0xa6>
		{
			if (timer1_delayTimeMs == 0)
 9e6:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <timer1_delayTimeMs>
 9ea:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <timer1_delayTimeMs+0x1>
 9ee:	a0 91 9d 00 	lds	r26, 0x009D	; 0x80009d <timer1_delayTimeMs+0x2>
 9f2:	b0 91 9e 00 	lds	r27, 0x009E	; 0x80009e <timer1_delayTimeMs+0x3>
 9f6:	89 2b       	or	r24, r25
 9f8:	8a 2b       	or	r24, r26
 9fa:	8b 2b       	or	r24, r27
 9fc:	81 f4       	brne	.+32     	; 0xa1e <__vector_7+0xa6>
			{
				ptr_timer1ISR();
 9fe:	09 95       	icall
				delay_time_temp = 0;
 a00:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <delay_time_temp.2001>
 a04:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <delay_time_temp.2001+0x1>
 a08:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <delay_time_temp.2001+0x2>
 a0c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <delay_time_temp.2001+0x3>
				
				if (timer1_operation_mode == (uint8_t) SINGLE_OPERATION)
 a10:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <timer1_operation_mode>
 a14:	81 11       	cpse	r24, r1
 a16:	03 c0       	rjmp	.+6      	; 0xa1e <__vector_7+0xa6>
					TIMER_STOP(CHANNEL_1);
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER_STOP>
			}
		}
	}
}
 a1e:	ff 91       	pop	r31
 a20:	ef 91       	pop	r30
 a22:	bf 91       	pop	r27
 a24:	af 91       	pop	r26
 a26:	9f 91       	pop	r25
 a28:	8f 91       	pop	r24
 a2a:	7f 91       	pop	r23
 a2c:	6f 91       	pop	r22
 a2e:	5f 91       	pop	r21
 a30:	4f 91       	pop	r20
 a32:	3f 91       	pop	r19
 a34:	2f 91       	pop	r18
 a36:	0f 90       	pop	r0
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	0f 90       	pop	r0
 a3c:	1f 90       	pop	r1
 a3e:	18 95       	reti

00000a40 <__vector_4>:

// Timer 2 ISR
ISR(TIMER2_COMP_vect)
{
 a40:	1f 92       	push	r1
 a42:	0f 92       	push	r0
 a44:	0f b6       	in	r0, 0x3f	; 63
 a46:	0f 92       	push	r0
 a48:	11 24       	eor	r1, r1
 a4a:	2f 93       	push	r18
 a4c:	3f 93       	push	r19
 a4e:	4f 93       	push	r20
 a50:	5f 93       	push	r21
 a52:	6f 93       	push	r22
 a54:	7f 93       	push	r23
 a56:	8f 93       	push	r24
 a58:	9f 93       	push	r25
 a5a:	af 93       	push	r26
 a5c:	bf 93       	push	r27
 a5e:	ef 93       	push	r30
 a60:	ff 93       	push	r31
	static uint32_t delay_time_temp = 0;
	delay_time_temp++;
 a62:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 a66:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__data_end+0x1>
 a6a:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <__data_end+0x2>
 a6e:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <__data_end+0x3>
 a72:	01 96       	adiw	r24, 0x01	; 1
 a74:	a1 1d       	adc	r26, r1
 a76:	b1 1d       	adc	r27, r1
 a78:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 a7c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0x1>
 a80:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <__data_end+0x2>
 a84:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <__data_end+0x3>
	
	if (delay_time_temp == timer2_delayTimeMs)
 a88:	40 91 97 00 	lds	r20, 0x0097	; 0x800097 <timer2_delayTimeMs>
 a8c:	50 91 98 00 	lds	r21, 0x0098	; 0x800098 <timer2_delayTimeMs+0x1>
 a90:	60 91 99 00 	lds	r22, 0x0099	; 0x800099 <timer2_delayTimeMs+0x2>
 a94:	70 91 9a 00 	lds	r23, 0x009A	; 0x80009a <timer2_delayTimeMs+0x3>
 a98:	84 17       	cp	r24, r20
 a9a:	95 07       	cpc	r25, r21
 a9c:	a6 07       	cpc	r26, r22
 a9e:	b7 07       	cpc	r27, r23
 aa0:	11 f5       	brne	.+68     	; 0xae6 <__vector_4+0xa6>
	{
		if (ptr_timer2ISR != NULL)
 aa2:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <ptr_timer2ISR>
 aa6:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <ptr_timer2ISR+0x1>
 aaa:	30 97       	sbiw	r30, 0x00	; 0
 aac:	e1 f0       	breq	.+56     	; 0xae6 <__vector_4+0xa6>
		{
			if (timer2_delayTimeMs == 0)
 aae:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <timer2_delayTimeMs>
 ab2:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <timer2_delayTimeMs+0x1>
 ab6:	a0 91 99 00 	lds	r26, 0x0099	; 0x800099 <timer2_delayTimeMs+0x2>
 aba:	b0 91 9a 00 	lds	r27, 0x009A	; 0x80009a <timer2_delayTimeMs+0x3>
 abe:	89 2b       	or	r24, r25
 ac0:	8a 2b       	or	r24, r26
 ac2:	8b 2b       	or	r24, r27
 ac4:	81 f4       	brne	.+32     	; 0xae6 <__vector_4+0xa6>
			{
				ptr_timer2ISR();
 ac6:	09 95       	icall
				delay_time_temp = 0;
 ac8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
 acc:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__data_end+0x1>
 ad0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__data_end+0x2>
 ad4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__data_end+0x3>
				
				if (timer2_operation_mode == (uint8_t) SINGLE_OPERATION)
 ad8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <timer2_operation_mode>
 adc:	81 11       	cpse	r24, r1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <__vector_4+0xa6>
					TIMER_STOP(CHANNEL_2);
 ae0:	82 e0       	ldi	r24, 0x02	; 2
 ae2:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER_STOP>
			}
		}
	}
 ae6:	ff 91       	pop	r31
 ae8:	ef 91       	pop	r30
 aea:	bf 91       	pop	r27
 aec:	af 91       	pop	r26
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	7f 91       	pop	r23
 af4:	6f 91       	pop	r22
 af6:	5f 91       	pop	r21
 af8:	4f 91       	pop	r20
 afa:	3f 91       	pop	r19
 afc:	2f 91       	pop	r18
 afe:	0f 90       	pop	r0
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	0f 90       	pop	r0
 b04:	1f 90       	pop	r1
 b06:	18 95       	reti

00000b08 <__divsf3>:
 b08:	0e 94 98 05 	call	0xb30	; 0xb30 <__divsf3x>
 b0c:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__fp_round>
 b10:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscB>
 b14:	58 f0       	brcs	.+22     	; 0xb2c <__divsf3+0x24>
 b16:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_pscA>
 b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0x24>
 b1c:	29 f4       	brne	.+10     	; 0xb28 <__divsf3+0x20>
 b1e:	5f 3f       	cpi	r21, 0xFF	; 255
 b20:	29 f0       	breq	.+10     	; 0xb2c <__divsf3+0x24>
 b22:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
 b26:	51 11       	cpse	r21, r1
 b28:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
 b2c:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>

00000b30 <__divsf3x>:
 b30:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_split3>
 b34:	68 f3       	brcs	.-38     	; 0xb10 <__divsf3+0x8>

00000b36 <__divsf3_pse>:
 b36:	99 23       	and	r25, r25
 b38:	b1 f3       	breq	.-20     	; 0xb26 <__divsf3+0x1e>
 b3a:	55 23       	and	r21, r21
 b3c:	91 f3       	breq	.-28     	; 0xb22 <__divsf3+0x1a>
 b3e:	95 1b       	sub	r25, r21
 b40:	55 0b       	sbc	r21, r21
 b42:	bb 27       	eor	r27, r27
 b44:	aa 27       	eor	r26, r26
 b46:	62 17       	cp	r22, r18
 b48:	73 07       	cpc	r23, r19
 b4a:	84 07       	cpc	r24, r20
 b4c:	38 f0       	brcs	.+14     	; 0xb5c <__divsf3_pse+0x26>
 b4e:	9f 5f       	subi	r25, 0xFF	; 255
 b50:	5f 4f       	sbci	r21, 0xFF	; 255
 b52:	22 0f       	add	r18, r18
 b54:	33 1f       	adc	r19, r19
 b56:	44 1f       	adc	r20, r20
 b58:	aa 1f       	adc	r26, r26
 b5a:	a9 f3       	breq	.-22     	; 0xb46 <__divsf3_pse+0x10>
 b5c:	35 d0       	rcall	.+106    	; 0xbc8 <__divsf3_pse+0x92>
 b5e:	0e 2e       	mov	r0, r30
 b60:	3a f0       	brmi	.+14     	; 0xb70 <__divsf3_pse+0x3a>
 b62:	e0 e8       	ldi	r30, 0x80	; 128
 b64:	32 d0       	rcall	.+100    	; 0xbca <__divsf3_pse+0x94>
 b66:	91 50       	subi	r25, 0x01	; 1
 b68:	50 40       	sbci	r21, 0x00	; 0
 b6a:	e6 95       	lsr	r30
 b6c:	00 1c       	adc	r0, r0
 b6e:	ca f7       	brpl	.-14     	; 0xb62 <__divsf3_pse+0x2c>
 b70:	2b d0       	rcall	.+86     	; 0xbc8 <__divsf3_pse+0x92>
 b72:	fe 2f       	mov	r31, r30
 b74:	29 d0       	rcall	.+82     	; 0xbc8 <__divsf3_pse+0x92>
 b76:	66 0f       	add	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	bb 1f       	adc	r27, r27
 b7e:	26 17       	cp	r18, r22
 b80:	37 07       	cpc	r19, r23
 b82:	48 07       	cpc	r20, r24
 b84:	ab 07       	cpc	r26, r27
 b86:	b0 e8       	ldi	r27, 0x80	; 128
 b88:	09 f0       	breq	.+2      	; 0xb8c <__divsf3_pse+0x56>
 b8a:	bb 0b       	sbc	r27, r27
 b8c:	80 2d       	mov	r24, r0
 b8e:	bf 01       	movw	r22, r30
 b90:	ff 27       	eor	r31, r31
 b92:	93 58       	subi	r25, 0x83	; 131
 b94:	5f 4f       	sbci	r21, 0xFF	; 255
 b96:	3a f0       	brmi	.+14     	; 0xba6 <__divsf3_pse+0x70>
 b98:	9e 3f       	cpi	r25, 0xFE	; 254
 b9a:	51 05       	cpc	r21, r1
 b9c:	78 f0       	brcs	.+30     	; 0xbbc <__divsf3_pse+0x86>
 b9e:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
 ba2:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
 ba6:	5f 3f       	cpi	r21, 0xFF	; 255
 ba8:	e4 f3       	brlt	.-8      	; 0xba2 <__divsf3_pse+0x6c>
 baa:	98 3e       	cpi	r25, 0xE8	; 232
 bac:	d4 f3       	brlt	.-12     	; 0xba2 <__divsf3_pse+0x6c>
 bae:	86 95       	lsr	r24
 bb0:	77 95       	ror	r23
 bb2:	67 95       	ror	r22
 bb4:	b7 95       	ror	r27
 bb6:	f7 95       	ror	r31
 bb8:	9f 5f       	subi	r25, 0xFF	; 255
 bba:	c9 f7       	brne	.-14     	; 0xbae <__divsf3_pse+0x78>
 bbc:	88 0f       	add	r24, r24
 bbe:	91 1d       	adc	r25, r1
 bc0:	96 95       	lsr	r25
 bc2:	87 95       	ror	r24
 bc4:	97 f9       	bld	r25, 7
 bc6:	08 95       	ret
 bc8:	e1 e0       	ldi	r30, 0x01	; 1
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	bb 1f       	adc	r27, r27
 bd2:	62 17       	cp	r22, r18
 bd4:	73 07       	cpc	r23, r19
 bd6:	84 07       	cpc	r24, r20
 bd8:	ba 07       	cpc	r27, r26
 bda:	20 f0       	brcs	.+8      	; 0xbe4 <__divsf3_pse+0xae>
 bdc:	62 1b       	sub	r22, r18
 bde:	73 0b       	sbc	r23, r19
 be0:	84 0b       	sbc	r24, r20
 be2:	ba 0b       	sbc	r27, r26
 be4:	ee 1f       	adc	r30, r30
 be6:	88 f7       	brcc	.-30     	; 0xbca <__divsf3_pse+0x94>
 be8:	e0 95       	com	r30
 bea:	08 95       	ret

00000bec <__fixunssfsi>:
 bec:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_splitA>
 bf0:	88 f0       	brcs	.+34     	; 0xc14 <__fixunssfsi+0x28>
 bf2:	9f 57       	subi	r25, 0x7F	; 127
 bf4:	98 f0       	brcs	.+38     	; 0xc1c <__fixunssfsi+0x30>
 bf6:	b9 2f       	mov	r27, r25
 bf8:	99 27       	eor	r25, r25
 bfa:	b7 51       	subi	r27, 0x17	; 23
 bfc:	b0 f0       	brcs	.+44     	; 0xc2a <__fixunssfsi+0x3e>
 bfe:	e1 f0       	breq	.+56     	; 0xc38 <__fixunssfsi+0x4c>
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	1a f0       	brmi	.+6      	; 0xc10 <__fixunssfsi+0x24>
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__fixunssfsi+0x14>
 c0e:	14 c0       	rjmp	.+40     	; 0xc38 <__fixunssfsi+0x4c>
 c10:	b1 30       	cpi	r27, 0x01	; 1
 c12:	91 f0       	breq	.+36     	; 0xc38 <__fixunssfsi+0x4c>
 c14:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fp_zero>
 c18:	b1 e0       	ldi	r27, 0x01	; 1
 c1a:	08 95       	ret
 c1c:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_zero>
 c20:	67 2f       	mov	r22, r23
 c22:	78 2f       	mov	r23, r24
 c24:	88 27       	eor	r24, r24
 c26:	b8 5f       	subi	r27, 0xF8	; 248
 c28:	39 f0       	breq	.+14     	; 0xc38 <__fixunssfsi+0x4c>
 c2a:	b9 3f       	cpi	r27, 0xF9	; 249
 c2c:	cc f3       	brlt	.-14     	; 0xc20 <__fixunssfsi+0x34>
 c2e:	86 95       	lsr	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	b3 95       	inc	r27
 c36:	d9 f7       	brne	.-10     	; 0xc2e <__fixunssfsi+0x42>
 c38:	3e f4       	brtc	.+14     	; 0xc48 <__fixunssfsi+0x5c>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	08 95       	ret

00000c4a <__floatunsisf>:
 c4a:	e8 94       	clt
 c4c:	09 c0       	rjmp	.+18     	; 0xc60 <__floatsisf+0x12>

00000c4e <__floatsisf>:
 c4e:	97 fb       	bst	r25, 7
 c50:	3e f4       	brtc	.+14     	; 0xc60 <__floatsisf+0x12>
 c52:	90 95       	com	r25
 c54:	80 95       	com	r24
 c56:	70 95       	com	r23
 c58:	61 95       	neg	r22
 c5a:	7f 4f       	sbci	r23, 0xFF	; 255
 c5c:	8f 4f       	sbci	r24, 0xFF	; 255
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	99 23       	and	r25, r25
 c62:	a9 f0       	breq	.+42     	; 0xc8e <__floatsisf+0x40>
 c64:	f9 2f       	mov	r31, r25
 c66:	96 e9       	ldi	r25, 0x96	; 150
 c68:	bb 27       	eor	r27, r27
 c6a:	93 95       	inc	r25
 c6c:	f6 95       	lsr	r31
 c6e:	87 95       	ror	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	b7 95       	ror	r27
 c76:	f1 11       	cpse	r31, r1
 c78:	f8 cf       	rjmp	.-16     	; 0xc6a <__floatsisf+0x1c>
 c7a:	fa f4       	brpl	.+62     	; 0xcba <__floatsisf+0x6c>
 c7c:	bb 0f       	add	r27, r27
 c7e:	11 f4       	brne	.+4      	; 0xc84 <__floatsisf+0x36>
 c80:	60 ff       	sbrs	r22, 0
 c82:	1b c0       	rjmp	.+54     	; 0xcba <__floatsisf+0x6c>
 c84:	6f 5f       	subi	r22, 0xFF	; 255
 c86:	7f 4f       	sbci	r23, 0xFF	; 255
 c88:	8f 4f       	sbci	r24, 0xFF	; 255
 c8a:	9f 4f       	sbci	r25, 0xFF	; 255
 c8c:	16 c0       	rjmp	.+44     	; 0xcba <__floatsisf+0x6c>
 c8e:	88 23       	and	r24, r24
 c90:	11 f0       	breq	.+4      	; 0xc96 <__floatsisf+0x48>
 c92:	96 e9       	ldi	r25, 0x96	; 150
 c94:	11 c0       	rjmp	.+34     	; 0xcb8 <__floatsisf+0x6a>
 c96:	77 23       	and	r23, r23
 c98:	21 f0       	breq	.+8      	; 0xca2 <__floatsisf+0x54>
 c9a:	9e e8       	ldi	r25, 0x8E	; 142
 c9c:	87 2f       	mov	r24, r23
 c9e:	76 2f       	mov	r23, r22
 ca0:	05 c0       	rjmp	.+10     	; 0xcac <__floatsisf+0x5e>
 ca2:	66 23       	and	r22, r22
 ca4:	71 f0       	breq	.+28     	; 0xcc2 <__floatsisf+0x74>
 ca6:	96 e8       	ldi	r25, 0x86	; 134
 ca8:	86 2f       	mov	r24, r22
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	60 e0       	ldi	r22, 0x00	; 0
 cae:	2a f0       	brmi	.+10     	; 0xcba <__floatsisf+0x6c>
 cb0:	9a 95       	dec	r25
 cb2:	66 0f       	add	r22, r22
 cb4:	77 1f       	adc	r23, r23
 cb6:	88 1f       	adc	r24, r24
 cb8:	da f7       	brpl	.-10     	; 0xcb0 <__floatsisf+0x62>
 cba:	88 0f       	add	r24, r24
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	97 f9       	bld	r25, 7
 cc2:	08 95       	ret

00000cc4 <__fp_inf>:
 cc4:	97 f9       	bld	r25, 7
 cc6:	9f 67       	ori	r25, 0x7F	; 127
 cc8:	80 e8       	ldi	r24, 0x80	; 128
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	08 95       	ret

00000cd0 <__fp_nan>:
 cd0:	9f ef       	ldi	r25, 0xFF	; 255
 cd2:	80 ec       	ldi	r24, 0xC0	; 192
 cd4:	08 95       	ret

00000cd6 <__fp_pscA>:
 cd6:	00 24       	eor	r0, r0
 cd8:	0a 94       	dec	r0
 cda:	16 16       	cp	r1, r22
 cdc:	17 06       	cpc	r1, r23
 cde:	18 06       	cpc	r1, r24
 ce0:	09 06       	cpc	r0, r25
 ce2:	08 95       	ret

00000ce4 <__fp_pscB>:
 ce4:	00 24       	eor	r0, r0
 ce6:	0a 94       	dec	r0
 ce8:	12 16       	cp	r1, r18
 cea:	13 06       	cpc	r1, r19
 cec:	14 06       	cpc	r1, r20
 cee:	05 06       	cpc	r0, r21
 cf0:	08 95       	ret

00000cf2 <__fp_round>:
 cf2:	09 2e       	mov	r0, r25
 cf4:	03 94       	inc	r0
 cf6:	00 0c       	add	r0, r0
 cf8:	11 f4       	brne	.+4      	; 0xcfe <__fp_round+0xc>
 cfa:	88 23       	and	r24, r24
 cfc:	52 f0       	brmi	.+20     	; 0xd12 <__fp_round+0x20>
 cfe:	bb 0f       	add	r27, r27
 d00:	40 f4       	brcc	.+16     	; 0xd12 <__fp_round+0x20>
 d02:	bf 2b       	or	r27, r31
 d04:	11 f4       	brne	.+4      	; 0xd0a <__fp_round+0x18>
 d06:	60 ff       	sbrs	r22, 0
 d08:	04 c0       	rjmp	.+8      	; 0xd12 <__fp_round+0x20>
 d0a:	6f 5f       	subi	r22, 0xFF	; 255
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	8f 4f       	sbci	r24, 0xFF	; 255
 d10:	9f 4f       	sbci	r25, 0xFF	; 255
 d12:	08 95       	ret

00000d14 <__fp_split3>:
 d14:	57 fd       	sbrc	r21, 7
 d16:	90 58       	subi	r25, 0x80	; 128
 d18:	44 0f       	add	r20, r20
 d1a:	55 1f       	adc	r21, r21
 d1c:	59 f0       	breq	.+22     	; 0xd34 <__fp_splitA+0x10>
 d1e:	5f 3f       	cpi	r21, 0xFF	; 255
 d20:	71 f0       	breq	.+28     	; 0xd3e <__fp_splitA+0x1a>
 d22:	47 95       	ror	r20

00000d24 <__fp_splitA>:
 d24:	88 0f       	add	r24, r24
 d26:	97 fb       	bst	r25, 7
 d28:	99 1f       	adc	r25, r25
 d2a:	61 f0       	breq	.+24     	; 0xd44 <__fp_splitA+0x20>
 d2c:	9f 3f       	cpi	r25, 0xFF	; 255
 d2e:	79 f0       	breq	.+30     	; 0xd4e <__fp_splitA+0x2a>
 d30:	87 95       	ror	r24
 d32:	08 95       	ret
 d34:	12 16       	cp	r1, r18
 d36:	13 06       	cpc	r1, r19
 d38:	14 06       	cpc	r1, r20
 d3a:	55 1f       	adc	r21, r21
 d3c:	f2 cf       	rjmp	.-28     	; 0xd22 <__fp_split3+0xe>
 d3e:	46 95       	lsr	r20
 d40:	f1 df       	rcall	.-30     	; 0xd24 <__fp_splitA>
 d42:	08 c0       	rjmp	.+16     	; 0xd54 <__fp_splitA+0x30>
 d44:	16 16       	cp	r1, r22
 d46:	17 06       	cpc	r1, r23
 d48:	18 06       	cpc	r1, r24
 d4a:	99 1f       	adc	r25, r25
 d4c:	f1 cf       	rjmp	.-30     	; 0xd30 <__fp_splitA+0xc>
 d4e:	86 95       	lsr	r24
 d50:	71 05       	cpc	r23, r1
 d52:	61 05       	cpc	r22, r1
 d54:	08 94       	sec
 d56:	08 95       	ret

00000d58 <__fp_zero>:
 d58:	e8 94       	clt

00000d5a <__fp_szero>:
 d5a:	bb 27       	eor	r27, r27
 d5c:	66 27       	eor	r22, r22
 d5e:	77 27       	eor	r23, r23
 d60:	cb 01       	movw	r24, r22
 d62:	97 f9       	bld	r25, 7
 d64:	08 95       	ret

00000d66 <__mulsf3>:
 d66:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__mulsf3x>
 d6a:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__fp_round>
 d6e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_pscA>
 d72:	38 f0       	brcs	.+14     	; 0xd82 <__mulsf3+0x1c>
 d74:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscB>
 d78:	20 f0       	brcs	.+8      	; 0xd82 <__mulsf3+0x1c>
 d7a:	95 23       	and	r25, r21
 d7c:	11 f0       	breq	.+4      	; 0xd82 <__mulsf3+0x1c>
 d7e:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
 d82:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_nan>
 d86:	11 24       	eor	r1, r1
 d88:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>

00000d8c <__mulsf3x>:
 d8c:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_split3>
 d90:	70 f3       	brcs	.-36     	; 0xd6e <__mulsf3+0x8>

00000d92 <__mulsf3_pse>:
 d92:	95 9f       	mul	r25, r21
 d94:	c1 f3       	breq	.-16     	; 0xd86 <__mulsf3+0x20>
 d96:	95 0f       	add	r25, r21
 d98:	50 e0       	ldi	r21, 0x00	; 0
 d9a:	55 1f       	adc	r21, r21
 d9c:	62 9f       	mul	r22, r18
 d9e:	f0 01       	movw	r30, r0
 da0:	72 9f       	mul	r23, r18
 da2:	bb 27       	eor	r27, r27
 da4:	f0 0d       	add	r31, r0
 da6:	b1 1d       	adc	r27, r1
 da8:	63 9f       	mul	r22, r19
 daa:	aa 27       	eor	r26, r26
 dac:	f0 0d       	add	r31, r0
 dae:	b1 1d       	adc	r27, r1
 db0:	aa 1f       	adc	r26, r26
 db2:	64 9f       	mul	r22, r20
 db4:	66 27       	eor	r22, r22
 db6:	b0 0d       	add	r27, r0
 db8:	a1 1d       	adc	r26, r1
 dba:	66 1f       	adc	r22, r22
 dbc:	82 9f       	mul	r24, r18
 dbe:	22 27       	eor	r18, r18
 dc0:	b0 0d       	add	r27, r0
 dc2:	a1 1d       	adc	r26, r1
 dc4:	62 1f       	adc	r22, r18
 dc6:	73 9f       	mul	r23, r19
 dc8:	b0 0d       	add	r27, r0
 dca:	a1 1d       	adc	r26, r1
 dcc:	62 1f       	adc	r22, r18
 dce:	83 9f       	mul	r24, r19
 dd0:	a0 0d       	add	r26, r0
 dd2:	61 1d       	adc	r22, r1
 dd4:	22 1f       	adc	r18, r18
 dd6:	74 9f       	mul	r23, r20
 dd8:	33 27       	eor	r19, r19
 dda:	a0 0d       	add	r26, r0
 ddc:	61 1d       	adc	r22, r1
 dde:	23 1f       	adc	r18, r19
 de0:	84 9f       	mul	r24, r20
 de2:	60 0d       	add	r22, r0
 de4:	21 1d       	adc	r18, r1
 de6:	82 2f       	mov	r24, r18
 de8:	76 2f       	mov	r23, r22
 dea:	6a 2f       	mov	r22, r26
 dec:	11 24       	eor	r1, r1
 dee:	9f 57       	subi	r25, 0x7F	; 127
 df0:	50 40       	sbci	r21, 0x00	; 0
 df2:	9a f0       	brmi	.+38     	; 0xe1a <__mulsf3_pse+0x88>
 df4:	f1 f0       	breq	.+60     	; 0xe32 <__mulsf3_pse+0xa0>
 df6:	88 23       	and	r24, r24
 df8:	4a f0       	brmi	.+18     	; 0xe0c <__mulsf3_pse+0x7a>
 dfa:	ee 0f       	add	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	bb 1f       	adc	r27, r27
 e00:	66 1f       	adc	r22, r22
 e02:	77 1f       	adc	r23, r23
 e04:	88 1f       	adc	r24, r24
 e06:	91 50       	subi	r25, 0x01	; 1
 e08:	50 40       	sbci	r21, 0x00	; 0
 e0a:	a9 f7       	brne	.-22     	; 0xdf6 <__mulsf3_pse+0x64>
 e0c:	9e 3f       	cpi	r25, 0xFE	; 254
 e0e:	51 05       	cpc	r21, r1
 e10:	80 f0       	brcs	.+32     	; 0xe32 <__mulsf3_pse+0xa0>
 e12:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_inf>
 e16:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
 e1a:	5f 3f       	cpi	r21, 0xFF	; 255
 e1c:	e4 f3       	brlt	.-8      	; 0xe16 <__mulsf3_pse+0x84>
 e1e:	98 3e       	cpi	r25, 0xE8	; 232
 e20:	d4 f3       	brlt	.-12     	; 0xe16 <__mulsf3_pse+0x84>
 e22:	86 95       	lsr	r24
 e24:	77 95       	ror	r23
 e26:	67 95       	ror	r22
 e28:	b7 95       	ror	r27
 e2a:	f7 95       	ror	r31
 e2c:	e7 95       	ror	r30
 e2e:	9f 5f       	subi	r25, 0xFF	; 255
 e30:	c1 f7       	brne	.-16     	; 0xe22 <__mulsf3_pse+0x90>
 e32:	fe 2b       	or	r31, r30
 e34:	88 0f       	add	r24, r24
 e36:	91 1d       	adc	r25, r1
 e38:	96 95       	lsr	r25
 e3a:	87 95       	ror	r24
 e3c:	97 f9       	bld	r25, 7
 e3e:	08 95       	ret

00000e40 <__udivmodsi4>:
 e40:	a1 e2       	ldi	r26, 0x21	; 33
 e42:	1a 2e       	mov	r1, r26
 e44:	aa 1b       	sub	r26, r26
 e46:	bb 1b       	sub	r27, r27
 e48:	fd 01       	movw	r30, r26
 e4a:	0d c0       	rjmp	.+26     	; 0xe66 <__udivmodsi4_ep>

00000e4c <__udivmodsi4_loop>:
 e4c:	aa 1f       	adc	r26, r26
 e4e:	bb 1f       	adc	r27, r27
 e50:	ee 1f       	adc	r30, r30
 e52:	ff 1f       	adc	r31, r31
 e54:	a2 17       	cp	r26, r18
 e56:	b3 07       	cpc	r27, r19
 e58:	e4 07       	cpc	r30, r20
 e5a:	f5 07       	cpc	r31, r21
 e5c:	20 f0       	brcs	.+8      	; 0xe66 <__udivmodsi4_ep>
 e5e:	a2 1b       	sub	r26, r18
 e60:	b3 0b       	sbc	r27, r19
 e62:	e4 0b       	sbc	r30, r20
 e64:	f5 0b       	sbc	r31, r21

00000e66 <__udivmodsi4_ep>:
 e66:	66 1f       	adc	r22, r22
 e68:	77 1f       	adc	r23, r23
 e6a:	88 1f       	adc	r24, r24
 e6c:	99 1f       	adc	r25, r25
 e6e:	1a 94       	dec	r1
 e70:	69 f7       	brne	.-38     	; 0xe4c <__udivmodsi4_loop>
 e72:	60 95       	com	r22
 e74:	70 95       	com	r23
 e76:	80 95       	com	r24
 e78:	90 95       	com	r25
 e7a:	9b 01       	movw	r18, r22
 e7c:	ac 01       	movw	r20, r24
 e7e:	bd 01       	movw	r22, r26
 e80:	cf 01       	movw	r24, r30
 e82:	08 95       	ret

00000e84 <__umulhisi3>:
 e84:	a2 9f       	mul	r26, r18
 e86:	b0 01       	movw	r22, r0
 e88:	b3 9f       	mul	r27, r19
 e8a:	c0 01       	movw	r24, r0
 e8c:	a3 9f       	mul	r26, r19
 e8e:	70 0d       	add	r23, r0
 e90:	81 1d       	adc	r24, r1
 e92:	11 24       	eor	r1, r1
 e94:	91 1d       	adc	r25, r1
 e96:	b2 9f       	mul	r27, r18
 e98:	70 0d       	add	r23, r0
 e9a:	81 1d       	adc	r24, r1
 e9c:	11 24       	eor	r1, r1
 e9e:	91 1d       	adc	r25, r1
 ea0:	08 95       	ret

00000ea2 <_exit>:
 ea2:	f8 94       	cli

00000ea4 <__stop_program>:
 ea4:	ff cf       	rjmp	.-2      	; 0xea4 <__stop_program>
